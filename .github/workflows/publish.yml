name: Publish Electron App

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Publish app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run publish

      - name: Verify DMG (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          echo "üîç Searching for DMG files..."
          find out/make -name "*.dmg"

          echo "‚úÖ Verifying DMG..."
          for dmg in $(find out/make -name "*.dmg"); do
            echo "Verifying $dmg"
            hdiutil verify "$dmg"

            echo "üîí Mounting DMG..."
            MOUNT_OUTPUT=$(hdiutil attach "$dmg" -nobrowse -readonly)
            MOUNT_DIR=$(echo "$MOUNT_OUTPUT" | grep -o '/Volumes/[^ ]*')
            echo "Mounted at $MOUNT_DIR"

            APP_PATH=$(find "$MOUNT_DIR" -name "*.app" -type d | head -n 1)
            if [ -z "$APP_PATH" ]; then
              echo "‚ùå No .app bundle found in DMG"
              exit 1
            fi
            echo "Found app: $APP_PATH"

            EXECUTABLE=$(defaults read "$APP_PATH/Contents/Info.plist" CFBundleExecutable)
            EXEC_PATH="$APP_PATH/Contents/MacOS/$EXECUTABLE"

            echo "üß™ Checking if executable exists and is valid..."
            if [ ! -x "$EXEC_PATH" ]; then
              echo "‚ùå Executable is missing or not executable: $EXEC_PATH"
              exit 1
            fi

            echo "üì¶ Executable file info:"
            file "$EXEC_PATH"

            echo "üîê Checking code signature (if any)..."
            codesign --verify --deep --strict --verbose=2 "$APP_PATH" || echo "‚ö†Ô∏è Not signed or signature is invalid"

            echo "‚úÖ All checks passed!"

            echo "üì§ Unmounting..."
            hdiutil detach "$MOUNT_DIR"
          done
